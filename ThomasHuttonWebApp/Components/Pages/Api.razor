@page "/apishowcase"
@inject HttpClient Http
@using Classes
@rendermode InteractiveServer

<h1>API Showcase</h1>

<div class="row d-flex align-items-stretch">
    <div class="col-sm-6 mb-3 mb-sm-0">
        <div class="card h-100 text-center border-dark">
            <h3 class="card-header">Weather API</h3>
            <div class="card-body">
                <input @bind="city" placeholder="Enter city" class="form-control mb-3" />
                <button class="btn btn-primary mb-3" @onclick="WeatherUpdate">Check Forecast</button>
                @if (!string.IsNullOrEmpty(weathererror))
                {
                    <div class="alert alert-danger">@weathererror</div>
                }
                else if (forecast != null)
                {
                    <h5 class="card-header">@forecast.location.name, @forecast.location.region @forecast.location.country</h5>
                    <p class="card-text">
                        <strong>Temperature:</strong> @forecast.current.temp_f °F
                        <br />
                        <strong>Conditions:</strong> @forecast.current.condition.text
                        <img src="https:@forecast.current.condition.icon" />
                    </p>
                }
                else
                {
                    <p class="card-text text-muted">Enter a city and click "Check Forecast".</p>
                }
            </div>
        </div>
    </div>
    <div class="col-sm-6">
        <div class="card h-100 text-center border-dark">
            <h3 class="card-header">Dictionary API</h3>
            <div class="card-body">
                <input @bind="word" placeholder="Enter Word" class="form-control mb-3" />
                <button class="btn btn-primary mb-3" @onclick="DictionarySearch">Look Up Word</button>
                @if (!string.IsNullOrEmpty(dictionaryError))
                {
                    <div class="alert alert-danger">@dictionaryError</div>
                }else if (entry != null)
                {
                    <h5 class="card-header">@entry.word</h5>
                    <br />
                    <strong>Part of Speech: </strong> @entry.meanings[currentMeaningIndex].partOfSpeech
                    <br />
                    <strong>Definition: </strong> @entry.meanings[currentMeaningIndex].definitions[currentDefIndex].definition
                    <br />
                    <br />
                    <button class="btn btn-outline-secondary mb-3" @onclick="NextDefinition">Next Definition</button>

                }
                else
                {
                    <p class="card-text text-muted">Enter a word and click "Look Up Word".</p>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private string city = "Chicago";
    private Forecast forecast;
    private string weathererror;
    private async Task WeatherUpdate()
    {
        weathererror = null;
        try
        {
            var url = $"https://api.weatherapi.com/v1/current.json?key=bde39218717c435386a12830251806&q={city}";
            forecast = await Http.GetFromJsonAsync<Forecast>(url);
        }
        catch (HttpRequestException ex)
        {
            weathererror = "Location not found";
            Console.WriteLine("Weather API error: " + ex.Message);
        }
    }
    private Dictionary entry;
    private string word = "Hello";
    private string dictionaryError;
    private int currentDefIndex = 0;
    private int currentMeaningIndex = 0;
    private async Task DictionarySearch()
    {
        dictionaryError = null;
        currentDefIndex = 0;
        try
        {
            var url = $"https://api.dictionaryapi.dev/api/v2/entries/en/{word}";
            var dictionaryList = await Http.GetFromJsonAsync<List<Dictionary>>(url);
            entry = dictionaryList[0];

        }
        catch(HttpRequestException ex)
        {
            dictionaryError = "Word not found";
            Console.WriteLine("Dictionary API error" + ex.Message);
        }
    }

    private void NextDefinition()
    {
        currentDefIndex++;
        if (currentDefIndex >= entry.meanings[0].definitions.Count)
        {
            currentDefIndex = 0;
            currentMeaningIndex++;
            if(currentMeaningIndex >= entry.meanings.Count)
            {
                currentMeaningIndex = 0;
            }
        }
    }
}

