@page "/visitors"
@rendermode InteractiveServer
@using Classes
@using Microsoft.EntityFrameworkCore
@inject AppDbContext Db



<PageTitle>Visitor's Center</PageTitle>

<h1>Visitor's Center</h1>

<p class="lead">Please enter your first name and the company you represent. Your data will be sent to a SQL database and displayed below. SQL server may take some spin-up time upon fist visit. </p>

<EditForm Model="@newPerson" OnValidSubmit="@AddContact">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <InputText @bind-Value="newPerson.Name" placeholder="First Name" class="form-control mb-2" />
    <InputText @bind-Value="newPerson.Company" placeholder="Company" class="form-control mb-2" />
    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

<hr />
<h4>Saved Contacts</h4>

@if (isLoading)
{
<div class="spinner-border text-primary" role="status">
    <span class="visually-hidden">Loading...</span>
    </div>
}
else if(!string.IsNullOrEmpty(error))
{
    <div class="alert alert-danger" role="alert">
        <h3>SQL database booting up from sleep state, please reload page</h3>
        <button class="btn btn-danger" @onclick="ReloadPage">Reload</button>
    </div>
}
else
{
<table class= "table table-sm">
    <thead class="table-dark">
        <tr>
            <th scope="col">Name</th>
            <th scope="col">Company</th>
            <th scope="col">Date Signed</th>
        </tr>
    </thead>
    <tbody>
        @foreach(var person in contacts)
        {
            <tr class="table-hover">
                <td>@person.Name</td>
                <td>@person.Company</td>
                <td>@person.Datesigned.ToString("MM/dd/yyyy")</td>
            </tr>
        }
    </tbody>
</table>
}


@code {
    private Person newPerson = new();
    private List<Person> contacts = new();
    private bool isLoading;
    private string error;
    void ReloadPage()
    {
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

    [Inject] NavigationManager NavigationManager { get; set; }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        error = null;
        if (!firstRender) return;

        isLoading = true;
        StateHasChanged();             

        try
        {
            contacts = await Db.Contacts.ToListAsync();
        }
        catch (Exception ex)
        {
            error = ex.Message;          
        }
        finally
        {
            isLoading = false;            
            await InvokeAsync(StateHasChanged);
        }

    }

    private async Task AddContact()
    {
        newPerson.Datesigned = DateTime.UtcNow;
        Db.Contacts.Add(newPerson);
        await Db.SaveChangesAsync();
        contacts = await Db.Contacts.ToListAsync();
        newPerson = new Person(); 
    }
}
