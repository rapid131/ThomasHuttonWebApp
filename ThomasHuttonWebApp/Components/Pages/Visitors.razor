@page "/visitors"
@rendermode InteractiveServer
@using Classes
@using Microsoft.EntityFrameworkCore
@inject AppDbContext Db


<PageTitle>Visitor's Center</PageTitle>

<h1>Visitor's Center</h1>
@if (isLoading)
{
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else
{
    <p class="lead">Please enter your first name and the company you represent. Your data will be sent to a SQL database and displayed below. </p>

    <EditForm Model="@newPerson" OnValidSubmit="@AddContact">
        <InputText @bind-Value="newPerson.Name" placeholder="Name" class="form-control mb-2" />
        <InputText @bind-Value="newPerson.Company" placeholder="Company" class="form-control mb-2" />
        <button type="submit" class="btn btn-primary">Submit</button>
    </EditForm>

    <hr />
    <h4>Saved Contacts</h4>
    <ul>
        @foreach (var person in contacts)
        {
            <li><strong>@person.Name</strong> — @person.Company</li>
        }
    </ul>
}

@code {
    private Person newPerson = new();
    private List<Person> contacts = new();
    private bool isLoading;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isLoading = true;
            StateHasChanged();
            contacts = await Db.Contacts.ToListAsync();
            isLoading = false;
            StateHasChanged(); // trigger re-render after load
        }
    }

    private async Task AddContact()
    {
        Db.Contacts.Add(newPerson);
        await Db.SaveChangesAsync();
        contacts = await Db.Contacts.ToListAsync();
        newPerson = new Person(); // Reset form
    }
}
